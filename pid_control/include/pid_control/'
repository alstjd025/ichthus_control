#include <rclcpp/rclcpp.hpp>
#include <std_msgs/msg/float64.hpp>
#include <std_msgs/msg/float64_multi_array.hpp>
#include <memory>

#include "ichthus_can_msgs/msg/pid.hpp"

namespace ichthus
{

class PIDController : public rclcpp::Node
{
  private:
    rclcpp::Publisher<ichthus_can_msgs::msg::Pid>::SharedPtr pid_thr_pub;
    rclcpp::Publisher<ichthus_can_msgs::msg::Pid>::SharedPtr pid_str_pub;
    rclcpp::Subscription<std_msgs::msg::Float64>::SharedPtr ref_thr_sub;
    rclcpp::Subscription<std_msgs::msg::Float64>::SharedPtr ref_str_sub;
    rclcpp::Subscription<std_msgs::msg::Float64MultiArray>::SharedPtr spd_sub;
    rclcpp::Subscription<std_msgs::msg::Float64MultiArray>::SharedPtr ang_sub;

    float output_vel;
    float output_ang;
    float ref_vel;
    float ref_ang;

    float thr_Kp;
    float thr_Ki;
    float thr_Kd;

    float br_Kp;
    float br_Ki;
    float br_Kd;

    float str_Kp;
    float str_Ki;
    float str_Kd;

    float thr_output_last; 
    float thr_velocity_error_last;

    float brk_output_last; 
    float brk_velocity_error_last;

    float str_output_last; 
    float str_velocity_error_last;
  public:
    explicit PIDController(const rclcpp::NodeOptions &);
    ~PIDController() override;

    void init_Param();
    void pid_CB(const std_msgs::msg::Float64::SharedPtr);
    void spd_CB(const std_msgs::msg::Float64MultiArray::SharedPtr);
    void throttle_pid(float);
    void brake_pid(float);
    void steer_pid(float);
};

}
